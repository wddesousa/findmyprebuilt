// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// use at pcpartpicker 
//var string;document.querySelectorAll('.sidebar-content .group.group--spec .group__title').forEach(e => string += e.innerText.toLowerCase().replaceAll(' ', '_').replaceAll('.', '_').replaceAll('-', '_').replaceAll('/', '_') + "\n"); console.log(string); 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                  String      @id @default(nanoid()) @map("product_id")
  name                String //for prebuilt variations, this name is used to display when selecting variations of the main build. We can form this name automatically if none is provided by using a pattern like cpu + gpu + moba + memory 
  type                ProductType
  brand               Brand       @relation(fields: [brand_id], references: [id])
  brand_id            String
  created_at          DateTime    @default(now())
  updated_at          DateTime    @default(now())
  url                 String      @unique
  asin                String?
  slug                String      @unique
  is_retired          Boolean     @default(false)
  prices              Price[]
  prebuilt_attributes Prebuilt[]
  cases               Case[]
  memories            Memory[]
  gpus                Gpu[]
  cpus                Cpu[]
  mobas               Moba[]
  storages            Storage[]
  coolers             Cooler[]
  psus                Psu[]
  fans                CaseFan[]

  @@unique([name, brand_id])
  @@index([is_retired])
}

model Brand {
  id              String          @id @default(nanoid())
  name            String          @unique
  products        Product[]
  moba_chipset    MobaChipset[]
  product_tracker ProductTracker?
}

enum ProductType {
  GPU
  CPU
  MOBA
  CASE
  PREBUILT
  MEMORY
  STORAGE
  COOLER
  PSU
  CASEFAN
}

enum CpuCoolerType {
  AIR
  LIQUID
}

model Prebuilt {
  product                   Product         @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id                String          @id
  base_price                Decimal         @db.Decimal(7, 2)
  memory_modules            Int
  memory_module_gb          Int
  memory_speed              MemorySpeed     @relation(fields: [memory_speed_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memory_speed_id           String
  main_storage_gb           Int
  case_moba_form_factors    FormFactor[]
  seconday_storage_gb       Int?
  front_fan_mm              Float?
  rear_fan_mm               Float?
  cpu_cooler_mm             Float?
  cpu_cooler_type           CpuCoolerType
  os                        OperativeSystem @relation(fields: [os_id], references: [id])
  os_id                     String
  wireless                  Boolean
  psu_wattage               Int
  psu_efficiency_rating     PsuRating?
  customizable              Boolean
  warranty_months           Int //warranty in months
  specs_html                String
  moba_chipset              MobaChipset     @relation(fields: [moba_chipset_id], references: [id])
  moba_chipset_id           String //in case they don't specify the moba model, use this to find join with moba table and find cpus with the same socket same with gpu chipset
  gpu_chipset               GpuChipset      @relation(fields: [gpu_chipset_id], references: [id])
  gpu_chipset_id            String //in case they don't specify the moba model, use this to find join with moba table and find cpus with the same socket same with gpu chipset
  main_storage_type         StorageType     @relation("Prebuilt_MainStorageType", fields: [main_storage_type_id], references: [id])
  main_storage_type_id      String
  secondary_storage_type    StorageType?    @relation("Prebuilt_SecondaryStorageType", fields: [secondary_storage_type_id], references: [id])
  secondary_storage_type_id String
  cpu                       Cpu             @relation(fields: [cpu_id], references: [product_id])
  cpu_id                    String
  parts                     PrebuiltParts?
  performance               Performance[]
}

model PrebuiltParts {
  prebuilt       Prebuilt @relation(fields: [prebuilt_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  prebuilt_id    String   @id
  moba_variation Moba?    @relation(fields: [moba_id], references: [product_id])
  moba_id        String?
  gpu_variation  Gpu?     @relation(fields: [gpu_id], references: [product_id])
  gpu_id         String?
  case           Case?    @relation(fields: [case_id], references: [product_id])
  case_id        String?
  psu            Psu?     @relation(fields: [psu_id], references: [product_id])
  psu_id         String?
  cooler         Cooler?  @relation(fields: [cooler_id], references: [product_id])
  cooler_id      String?
  front_fan      CaseFan? @relation("Prebuilt_FrontFans", fields: [front_fan_id], references: [product_id])
  front_fan_id   String?
  rear_fan       CaseFan? @relation("Prebuilt_BackFans", fields: [back_fan_id], references: [product_id])
  back_fan_id    String?
}

model StorageType {
  id                     String     @id @default(nanoid())
  name                   String     @unique
  storages               Storage[]
  main_of_prebuilts      Prebuilt[] @relation("Prebuilt_MainStorageType")
  secondary_of_prebuilts Prebuilt[] @relation("Prebuilt_SecondaryStorageType")
}

model Storage {
  product         Product     @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id      String      @id
  part_number     String[]
  capacity_gb     Int
  storage_type    StorageType @relation(fields: [storage_type_id], references: [id])
  storage_type_id String
  form_factor     String
  interface       String
  nvme            Boolean
}

model Case {
  product                      Product         @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id                   String          @id
  prebuilts                    PrebuiltParts[]
  part_number                  String[]
  type                         String
  color                        String
  power_supply                 Boolean
  side_panel                   String
  power_supply_shroud          Boolean
  front_panel_usb              String[]
  moba_form_factors            FormFactor[]
  maximum_video_card_length_mm Int
  drive_bays                   String[]
  expansion_slots              String
  volume_ml                    Int
  dimensions                   String[]
}

model CaseFan {
  product                Product         @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id             String          @id
  part_number            String[]
  size_mm                Int
  color                  String
  quantity               String
  airflow                String
  noise_level            String
  pwm                    Boolean
  led                    String
  connector              String
  controller             String
  static_pressure_mmh2o  Decimal         @db.Decimal(3, 2)
  front_fan_on_prebuilts PrebuiltParts[] @relation("Prebuilt_FrontFans")
  back_fan_on_prebuilts  PrebuiltParts[] @relation("Prebuilt_BackFans")
}

model FormFactor {
  id        String     @id @default(nanoid())
  name      String     @unique
  cases     Case[]
  mobas     Moba[]
  prebuilts Prebuilt[]
}

model Memory {
  product            Product     @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id         String      @id
  part_number        String[]
  form_factor        String
  modules            String
  color              String
  first_word_latency Int
  cas_latency        Int
  voltage            Decimal     @db.Decimal(3, 2)
  timing             String
  ecc_registered     String
  heat_spreader      Boolean
  memory_speed       MemorySpeed @relation(fields: [memory_speed_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memory_speed_id    String
}

model MemorySpeed {
  id        String         @id @default(nanoid())
  ddr       DoubleDataRate
  speed     Int
  memories  Memory[]
  prebuilts Prebuilt[]
  mobas     Moba[]

  @@unique([ddr, speed])
}

enum DoubleDataRate {
  DDR2
  DDR3
  DDR4
  DDR5
  DDR6
  DDR7
}

model Price {
  id         String   @id @default(nanoid())
  price      Decimal  @db.Decimal(7, 2)
  created_at DateTime
  store      Store    @relation(fields: [store_id], references: [id])
  store_id   String
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id String

  @@unique([store_id, product_id])
}

model Store {
  id               String  @id @default(nanoid())
  name             String
  store_region_iso String
  prices           Price[]
}

model Gpu {
  product                    Product         @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id                 String          @id
  part_number                String[]
  chipset                    GpuChipset      @relation(fields: [chipset_id], references: [id])
  chipset_id                 String
  memory_gb                  Int
  memory_type                String
  core_clock_mhz             Int
  boost_clock_mhz            Int
  effective_memory_clock_mhz Int
  interface                  String
  color                      String
  frame_sync                 String
  length_mm                  Int
  tdp_w                      Int
  case_expansion_slot_width  Int
  total_slot_width           Int
  cooling                    Int
  external_power             String
  hdmi_outputs               Int
  displayport_outputs        Int
  prebuilts                  PrebuiltParts[]
}

model GpuChipset {
  id                  String     @id @default(nanoid())
  name                String     @unique
  gpus                Gpu[]
  prebuilt_attributes Prebuilt[]
}

model Cpu {
  product                          Product    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id                       String     @id
  part_number                      String[]
  series                           String
  microarchitecture                String
  core_family                      String
  socket                           Socket     @relation(fields: [socket_id], references: [id])
  socket_id                        String
  core_count                       Int
  thread_count                     Int
  performance_core_clock_ghz       Float
  performance_core_boost_clock_ghz Float
  l2_cache_mb                      Int
  l3_cache_mb                      Int
  tdp_w                            Int
  integrated_graphics              String
  maximum_supported_memory_gb      Int
  ecc_support                      Boolean
  includes_cooler                  Boolean
  packaging                        String
  lithography_nm                   Int
  includes_cpu_cooler              Boolean
  simultaneous_multithreading      Boolean
  prebuilts                        Prebuilt[]
}

model Moba {
  //moba parts
  product                      Product              @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id                   String               @id
  part_number                  String[]
  socket                       Socket               @relation(fields: [socket_id], references: [id])
  socket_id                    String
  moba_form_factor             FormFactor           @relation(fields: [moba_form_factor_id], references: [id])
  moba_form_factor_id          String
  chipset                      MobaChipset          @relation(fields: [chipset_id], references: [id])
  chipset_id                   String
  memory_max                   Int
  memory_speeds                MemorySpeed[]
  memory_slots                 Int
  color                        String
  pcie_x16_slots               Int
  pcie_x8_slots                Int
  pcie_x_slots                 Int
  pcie_x1_slots                Int
  pci_slots                    Int
  m_2_slots                    MobaM2SlotsOnMobas[]
  mini_pcie_slots              Int
  half_mini_pcie_slots         Int
  mini_pcie_msata_slots        Int
  msata_slots                  Int
  sata_6_0_gbs                 Int
  onboard_ethernet             String
  onboard_video                String
  usb_2_0_headers              Int
  usb_2_0_headers_single_port  Int
  usb_3_2_gen_1_headers        Int
  usb_3_2_gen_2_headers        Int
  usb_3_2_gen_2x2_headers      Int
  supports_ecc                 Boolean
  wireless_networking          String
  raid_support                 Boolean
  uses_back_connect_connectors Boolean
  prebuilts                    PrebuiltParts[]
}

model MobaChipset {
  id                  String     @id @default(nanoid())
  name                String     @unique
  pci_generation      Decimal    @db.Decimal(2, 1)
  cpu_oc              Boolean
  memory_oc           Boolean
  max_usb_5_gbps      Int
  max_usb_10_gbps     Int
  max_usb_20_gbps     Int
  max_sata_ports      Int
  max_usb_2_gen       Int
  usb_4_guaranteed    Boolean? //null = no support, true = guaranteed, false = optionally
  brand               Brand      @relation(fields: [brand_id], references: [id])
  brand_id            String
  prebuilt_attributes Prebuilt[]
  mobas               Moba[]
}

model MobaM2Slots {
  id       String               @id @default(nanoid())
  key_type M2Key
  size     String //like "2280" or "2240/2280/..."
  mobas    MobaM2SlotsOnMobas[]

  @@unique([key_type, size])
}

model MobaM2SlotsOnMobas {
  id             String      @id @default(nanoid())
  moba           Moba        @relation(fields: [moba_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  moba_id        String
  mobaM2Slot     MobaM2Slots @relation(fields: [mobaM2Slots_id], references: [id])
  mobaM2Slots_id String
}

model Cooler {
  product                  Product         @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id               String          @id
  part_number              String[]
  fan_rpm                  String
  color                    String
  height_mm                Int?
  cpu_sockets              Socket[]
  water_cooled_radiador_mm Int?
  fanless                  Boolean
  prebuilts                PrebuiltParts[]
}

model Psu {
  product                          Product         @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id                       String          @id
  part_number                      String[]
  type                             String
  efficiency_rating                PsuRating?
  wattage_w                        Int
  length_mm                        Int
  modular                          String
  color                            String
  fanless                          Boolean
  atx_4_pin_connectors             Int
  eps_8_pin_connectors             Int
  pcie_12_4_pin_12vhpwr_connectors Int
  pcie_12_pin_connectors           Int
  pcie_8_pin_connectors            Int
  pcie_6_2_pin_connectors          Int
  pcie_6_pin_connectors            Int
  sata_connectors                  Int
  molex_4_pin_connectors           Int
  prebuilts                        PrebuiltParts[]
}

model OperativeSystem {
  id        String     @id @default(nanoid())
  name      String     @unique
  prebuilts Prebuilt[]
}

enum PsuRating {
  TITANIUM
  PLATINUM
  GOLD
  SILVER
  BRONZE
}

enum M2Key {
  M
  B
  BM
  E
}

model Socket {
  id      String   @id @default(nanoid())
  name    String   @unique
  mobas   Moba[]
  cpus    Cpu[]
  coolers Cooler[]
}

model Game {
  id          String        @id @default(nanoid())
  name        String        @unique
  performance Performance[]
}

model Performance {
  id          String     @id @default(nanoid())
  resolution  Resolution
  game        Game       @relation(fields: [game_id], references: [id])
  game_id     String
  prebuilt    Prebuilt   @relation(fields: [prebuilt_id], references: [product_id])
  prebuilt_id String
  fps         Int

  @@unique([resolution, game_id, prebuilt_id])
}

enum Resolution {
  R1080P
  R1440P
  R2160P
}

model NewProductQueue {
  id              String     @id @default(nanoid())
  website_url     String     @unique
  scraped_data    Json
  last_scraped_at DateTime   @default(now())
  type            TypeOfEdit
  is_curated      Boolean    @default(false)
}

model ProductTracker {
  id                     String   @id @default(nanoid())
  brand                  Brand    @relation(fields: [brand_id], references: [id])
  brand_id               String   @unique
  current_products_slugs String[] //; separated list of slugs to product pages
  last_scraped_at        DateTime @default(now())
}

enum TypeOfEdit {
  ADD
  REMOVE
  UPDATE
}
