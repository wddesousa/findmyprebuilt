// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  product_id          String               @id @default(cuid())
  name        String //for prebuilt variations, this name is used to display when selecting variations of the main build. We can form this name automatically if none is provided by using a pattern like cpu + gpu + moba + memory 
  type        ProductType
  brand               Brand                @relation(fields: [brand_id], references: [id])
  brand_id            String
  created_at          DateTime             @default(now())
  updated_at          DateTime             @default(now())
  url                 String               @unique
  asin                String?
  prices              Price[]
  prebuilt_attributes PrebuiltAttributes[]
  cases               Case[]
  memories            Memory[]
  gpus                Gpu[]
  cpus                Cpu[]
  mobas               Moba[]

  @@unique([name, brand_id])
}

model Brand {
  id          String        @id @default(cuid())
  name       String        @unique
  products    Product[]
  moba_chipset MobaChipset[]
}

enum ProductType {
  GPU
  CPU
  MOBA
  CASE
  PREBUILT
  MEMORY
  STORAGE
  FAN
  HEATSINK
}

model BasePrebuilt {
  //here's the main, base prebuilt that can have multiple variations in the prebuiltattributes table
  id    String               @id @default(cuid())
  name  String               @unique //this is what will be shown on the page title
  warranty_months     Int //warranty in months
  os                  String
  prebuilt_attributes PrebuiltAttributes[]
}

model PrebuiltAttributes {
  product                Product      @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  product_id             String       @id
  prebuilt               BasePrebuilt @relation(fields: [prebuilt_id], references: [id])
  prebuilt_id            String
  total_memory           Int
  memory_slots_used      Int
  memory_slots Int
  memory_speed  MemorySpeed @relation(fields: [memory_speed_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memory_speed_id String
  main_storage_gb        Int
  main_storage_type      StorageType
  seconday_storage_gb    Int?
  secondary_storage_type StorageType?
  front_fans             Int?
  front_fans_mm          Float?
  bottom_fans            Float?
  bottom_fans_mm         Float?
  moba_chipset           MobaChipset? @relation(fields: [moba_chipset_id], references: [id])
  moba_chipset_id        String? //in case they don't specify the moba model, use this to find join with moba table and find cpus with the same socket
  cpu_variation          Cpu          @relation(fields: [cpu_id], references: [product_id])
  cpu_id                 String
  moba_variation         Moba?        @relation(fields: [moba_id], references: [product_id])
  moba_id                String?
  gpu_variation          Gpu          @relation(fields: [gpu_id], references: [product_id])
  gpu_id                 String
  case                   Case         @relation(fields: [case_id], references: [product_id])
  case_id                String
}

enum StorageType {
  NVME
  SSD
  HD
}

model Case {
  product                      Product              @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  product_id                   String               @id
  case_height                  Float
  case_width                   Float
  case_depth                   Float
  variations                   PrebuiltAttributes[]
  part_n                       String
  case_type                    String
  color                        String
  power_supply                 String?
  side_panel                   String
  power_supply_shroud          Boolean
  usb_32_gen_1_type_a          Int
  usb_32_gen_2_type_c          Int
  usb_2                        Int
  moba_form_factors            FormFactor[]
  maximum_video_card_length_mm Int
  drive_bays                   String[]
  expansion_slots              String
  volume_ml                    Int
}

model FormFactor {
  id          String @id @default(cuid())
  name String @unique
  cases       Case[]
  mobas       Moba[]
}

model Memory {
  product      Product    @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  product_id   String     @id
  total_memory Int
  memory_slots Int
  memory_speed  MemorySpeed @relation(fields: [memory_speed_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memory_speed_id String
}

model MemorySpeed {
  id          String @id @default(cuid())
  ddr  DoubleDataRate
  speed Int
  memories Memory[]
  prebuilts PrebuiltAttributes[]
  mobas Moba[]
  @@unique([ddr, speed])
}

enum DoubleDataRate {
  DDR2
  DDR3
  DDR4
  DDR5
  DDR6
  DDR7
}

model Price {
  id         String   @id @default(cuid())
  price      Decimal  @db.Decimal(7, 2)
  created_at DateTime
  store      Store    @relation(fields: [store_id], references: [id])
  store_id   String
  product    Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  product_id String

  @@unique([store_id, product_id])
}

model Store {
  id               String  @id @default(cuid())
  name       String
  store_region_iso String
  prices           Price[]
}

model Gpu {
  product                    Product              @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  product_id                 String               @id
  part_number                String[]
  chipset                    GpuChipset @relation(fields: [chipset_id], references: [id])
  chipset_id                 String
  memory_gb                  Int
  memory_type                String
  core_clock_mhz             Int
  boost_clock_mhz            Int
  effective_memory_clock_mhz Int
  interface                  String
  color                      String
  frame_sync                 String
  length_mm                  Int
  tdp_w                      Int
  case_expansion_slot_width  Int
  total_slot_width           Int
  cooling                    Int
  external_power             String
  hdmi_outputs               Int
  displayport_outputs        Int
  prices                     PrebuiltAttributes[]
}

model GpuChipset {
  id    String @id @default(cuid())
  name String @unique
  gpus Gpu[]
}

model Cpu {
  product                          Product              @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  product_id                       String               @id
  part_number                      String
  series                           String
  microarchitecture                String
  core_family                      String
  socket Socket @relation(fields: [socket_id], references: [id])
  socket_id                String
  core_count                       Int
  thread_count                     Int
  performance_core_clock_ghz       Float
  performance_core_boost_clock_ghz Float
  l2_cache_mb                      Int
  l3_cache_mb                      Int
  tdp_w                            Int
  integrated_graphics              String
  maximum_supported_memory_gb      Int
  ecc_support                      Boolean
  includes_cooler                  Boolean
  packaging                        String
  lithography_nm                   Int
  includes_cpu_cooler              Boolean
  simultaneous_multithreading      Boolean
  prices                           PrebuiltAttributes[]
}

model Moba {
  //moba parts
  product                      Product              @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  product_id                   String               @id
  part_number                  String[]
  socket Socket @relation(fields: [socket_id], references: [id])
  socket_id                String
  moba_form_factor             FormFactor           @relation(fields: [moba_form_factor_id], references: [id])
  moba_form_factor_id          String
  chipset                      MobaChipset          @relation(fields: [chipset_id], references: [id])
  chipset_id                   String
  memory_max                   Int
  memory_speeds  MemorySpeed[]
  memory_slots                 Int
  speed                 String
  color                        String
  pcie_x16_slots               Int
  pcie_x8_slots                Int
  pcie_x_slots                 Int
  pcie_x1_slots                Int
  pci_slots                    Int
  m_2_slots                    MobaM2SlotsOnMobas[]
  mini_pcie_slots              Int
  half_mini_pcie_slots         Int
  mini_pcie_msata_slots        Int
  msata_slots                  Int
  sata_6_0_gbs                 Int
  onboard_ethernet             String
  onboard_video                String
  usb_2_0_headers              Int
  usb_2_0_headers_single_port  Int
  usb_3_2_gen_1_headers        Int
  usb_3_2_gen_2_headers        Int
  usb_3_2_gen_2x2_headers      Int
  supports_ecc                 Boolean
  wireless_networking          String
  raid_support                 Boolean
  uses_back_connect_connectors Boolean
  prices                       PrebuiltAttributes[]
}

model MobaChipset {
  id                  String               @id @default(cuid())
  name             String               @unique
  pci_generation      Decimal              @db.Decimal(2, 1)
  cpu_oc              Boolean
  memory_oc           Boolean
  max_usb_5_gbps      Int
  max_usb_10_gbps     Int
  max_usb_20_gbps     Int
  max_sata_ports      Int
  max_usb_2_gen       Int
  usb_4_guaranteed    Boolean? //null = no support, true = guaranteed, false = optionally
  brand               Brand                @relation(fields: [brand_id], references: [id])
  brand_id            String
  prebuilt_attributes PrebuiltAttributes[]
  mobas               Moba[]
}

model MobaM2Slots {
  id    String @id @default(cuid())
  key_type M2Key
  size String //like "2280" or "2240/2280/..."
  mobas MobaM2SlotsOnMobas[]

  @@unique([key_type, size])
}

model MobaM2SlotsOnMobas {
  id    String @id @default(cuid())
  moba Moba  @relation(fields: [moba_id], references: [product_id])
  moba_id String 
  mobaM2Slot MobaM2Slots @relation(fields: [mobaM2Slots_id], references: [id])
  mobaM2Slots_id String 
}

enum M2Key {
  M
  B
  BM
}

// use at pcpartpicker 
//var string;document.querySelectorAll('.sidebar-content .group.group--spec .group__title').forEach(e => string += e.innerText.toLowerCase().replaceAll(' ', '_').replaceAll('.', '_').replaceAll('-', '_').replaceAll('/', '_') + "\n"); console.log(string); 
model Socket {
  id    String @id @default(cuid())
  name String @unique
  mobas Moba[]
  cpus Cpu[]
}
