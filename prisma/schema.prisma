// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  product_id   String   @id @default(cuid())
  product_name String //for prebuilt variations, this name is used to display when selecting variations of the main build. We can form this name automatically if none is provided by using a pattern like cpu + gpu + moba + memory 
  product_type ProductType
  brand String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  prices Price[]
  prebuilt_attributes PrebuiltAttributes[]
}

enum ProductType {
  GPU
  CPU
  MOBA
  CASE
  PREBUILT
  MEMORY
  STORAGE
  FAN
  HEATSINK
}

model BasePrebuilt {
  //here's the main, base prebuilt that can have multiple variations in the prebuiltattributes table
  base_prebuilt_id   String   @id @default(cuid())
  base_prebuilt_name  String @unique //this is what will be shown on the page title
  warranty_months Int //warranty in months
  os String
  prebuilt_attributes PrebuiltAttributes[]
}

model PrebuiltAttributes {
  product Product @relation(fields: [product_id], references: [product_id])
  product_id   String @id
  prebuilt BasePrebuilt @relation(fields: [prebuilt_id], references: [base_prebuilt_id])
  prebuilt_id String
  total_memory Int
  memory_slots_used Int
  memory_type MemoryType
  memory_speed Int
  main_storage_gb Int
  main_storage_type StorageType
  seconday_storage_gb Int?
  secondary_storage_type StorageType
  cpu_variation CPU @relation(fields: [product_id], references: [product_id])
  cpu_id String
  moba_variation MOBA @relation(fields: [product_id], references: [product_id])
  moba_id String
  gpu_variation GPU @relation(fields: [product_id], references: [product_id])
  gpu_id String
  case Case @relation(fields: [case_id], references: [product_id])
  case_id String
}

enum StorageType {
  NVME
  SSD
  HD
}

model Case {
    product Product @relation(fields: [product_id], references: [product_id])
    product_id   String @id
    case_type String
    front_fans  Int
    front_fans_mm Float
    bottom_fans Float
    bottom_fans_mm Float
    case_height Float
    case_width Float
    case_depth Float
    variations PrebuiltAttributes[]
}

model Memory {
    product Product @relation(fields: [product_id], references: [product_id])
    product_id   String @id
    total_memory Int
    memory_slots Int
    memory_type MemoryType
    memory_speed Int
}

enum MemoryType {
  DDR2
  DDR3
  DDR4
  DDR5
  DDR6
  DDR7
}


model Price {
  id   String   @id @default(cuid())
  price Float
  created DateTime
  store_id String
  product Product @relation(fields: [product_id], references: [product_id])
  product_id String

  @@unique([store_id, product_id])
}



model GPU {
  product Product @relation(fields: [product_id], references: [product_id])
  product_id   String @id  
  manufacturer  String
  part_number String
  chipset String
  memory  Int
  memory_type String
  core_clock  Int
  boost_clock Int
  effective_memory_clock  Int
  interface String
  color String
  frame_sync  String
  length  Int
  tdp Int
  case_expansion_slot_width Int
  total_slot_width  Int
  cooling Int
  external_power  String
  hdmi_outputs  Int
  displayport_outputs Int
  prices PrebuiltAttributes[]
} 

model CPU {
    product Product @relation(fields: [product_id], references: [product_id])
    product_id   String @id
  manufacturer String
  part_number String
  series String
  microarchitecture String
  core_family String
  socket String
  core_count Int
  thread_count Int
  performance_core_clock Float
  performance_core_boost_clock Float
  l2_cache Int
  l3_cache Int
  tdp Int
  integrated_graphics String
  maximum_supported_memory Int
  ecc_support Boolean
  includes_cooler Boolean
  packaging String
  lithography Int
  includes_cpu_cooler Boolean
  simultaneous_multithreading Boolean
  prices PrebuiltAttributes[]
}

model MOBA {
    product Product @relation(fields: [product_id], references: [product_id])
    product_id   String @id
  manufacturer String
  part_number String
  socket_cpu String
  form_factor String
  chipset String
  memory_max  Int
  memory_type String
  memory_slots  Int
  memory_speed String
  color String
  pcie_x16_slots  Int
  pcie_x8_slots Int
  pcie_x_slots  Int
  pcie_x1_slots Int
  pci_slots Int
  m_2_slots String
  mini_pcie_slots Int
  half_mini_pcie_slots  Int
  mini_pcie_msata_slots Int
  msata_slots Int
  sata_6_0_gbs  Int
  onboard_ethernet String
  onboard_video String
  usb_2_0_headers Int
  usb_2_0_headers_single_port Int
  usb_3_2_gen_1_headers Int
  usb_3_2_gen_2_headers Int
  usb_3_2_gen_2x2_headers Int
  supports_ecc  Boolean
  wireless_networking String
  raid_support  Boolean
  uses_back_connect_connectors  Boolean
  prices PrebuiltAttributes[]
}

// use at pcpartpicker 
//var string;document.querySelectorAll('.sidebar-content .group.group--spec .group__title').forEach(e => string += e.innerText.toLowerCase().replaceAll(' ', '_').replaceAll('.', '_').replaceAll('-', '_').replaceAll('/', '_') + "\n"); console.log(string); 
model Socket {
    id   String   @id @default(cuid())
    model String

}